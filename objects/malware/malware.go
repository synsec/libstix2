// Copyright 2015-2019 Bret Jordan, All rights reserved.
// Copyright 2019 Oleksii Morozov, All rights reserved.
//
// Use of this source code is governed by an Apache 2.0 license that can be
// found in the LICENSE file in the root of the source tree.

package malware

import (
	"encoding/json"

	"github.com/freetaxii/libstix2/objects/baseobject"
	"github.com/freetaxii/libstix2/objects/properties"
)

// ----------------------------------------------------------------------
//
// Define Object Type
//
// ----------------------------------------------------------------------

/*
Malware - This type implements the STIX 2 Malware SDO and defines
all of the properties methods needed to create and work with the STIX Malware
SDO. All of the methods not defined local to this type are inherited from
the individual properties.
*/
type Malware struct {
	baseobject.CommonObjectProperties
	properties.NameProperty
	properties.DescriptionProperty
	properties.KillChainPhasesProperty
	properties.AliasesProperty
	properties.SeenProperties
	MalwareTypes              []string `json:"malware_types,omitempty"`
	IsFamily                  bool     `json:"is_family"`
	OsExecutionEnvs           []string `json:"os_execution_envs,omitempty"`
	ArchitectureExecutionEnvs []string `json:"architecture_execution_envs,omitempty"`
	ImplementationLanguages   []string `json:"implementation_languages,omitempty"`
	Capabilities              []string `json:"capabilities,omitempty"`
	SampleRefs                []string `json:"sample_refs,omitempty"`
}

// ----------------------------------------------------------------------
//
// Initialization Functions
//
// ----------------------------------------------------------------------

/*
New - This function will create a new STIX Malware object and return it as a
pointer.
*/
func New() *Malware {
	var obj Malware
	obj.InitObject("malware")
	return &obj
}

// ----------------------------------------------------------------------
// Public Methods - Malware - Core Functionality
// ----------------------------------------------------------------------

/*
Decode - This function will decode some JSON data encoded as a slice of bytes
into an actual struct. It will return the object as a pointer and any errors found.
*/
func Decode(data []byte) (*Malware, error) {
	var o Malware
	err := json.Unmarshal(data, &o)
	if err != nil {
		return nil, err
	}

	if valid, err := o.Valid(); valid != true {
		return nil, err
	}

	o.SetRawData(data)
	return &o, nil
}

/*
Encode - This method is a simple wrapper for encoding an object in to JSON
*/
func (o *Malware) Encode() ([]byte, error) {
	data, err := json.MarshalIndent(o, "", "    ")
	if err != nil {
		return nil, err
	}
	return data, nil
}

/*
EncodeToString - This method is a simple wrapper for encoding an object in to JSON
*/
func (o *Malware) EncodeToString() (string, error) {
	data, err := json.MarshalIndent(o, "", "    ")
	if err != nil {
		return "", err
	}
	return string(data), nil
}

// ----------------------------------------------------------------------
// Public Methods - Malware
// ----------------------------------------------------------------------

// func (this *Malware) AddFilename(value string) {
// 	if this.Filenames == nil {
// 		a := make([]string, 0)
// 		this.Filenames = a
// 	}
// 	this.Filenames = append(this.Filenames, value)
// }

// func (this *Malware) SetSize(i int) {
// 	this.Size = i
// }

// func (this *Malware) AddHash(k, v string) {
// 	if this.Hashes == nil {
// 		m := make(map[string]string, 0)
// 		this.Hashes = m
// 	}
// 	this.Hashes[k] = v
// }

// SetFirstSeen takes in two parameters and returns and error if there is one
// param: t a timestamp in either time.Time or string format
// param: s a timestamp precision in string format
// func (this *Malware) SetFirstSeen(t interface{}, s string) error {

// 	ts, err := this.VerifyTimestamp(t)
// 	if err != nil {
// 		return err
// 	}
// 	this.First_seen = ts

// 	p, err := this.VerifyPrecision(s)
// 	if err != nil {
// 		return err
// 	}
// 	this.First_seen_precision = p

// 	return nil
// }

// func (this *Malware) SetRegion(s string) {
// 	this.Region = s
// }

// func (this *Malware) SetCountry(s string) {
// 	// TODO make sure this is a two digit country code
// 	this.Country = s
// }

// func (this *Malware) NewScanData() *ScanDataType {
// 	var o ScanDataType

// 	if this.Scan_data == nil {
// 		a := make([]ScanDataType, 0)
// 		this.Scan_data = a
// 	}

// 	positionThatAppendWillUse := len(this.Scan_data)
// 	this.Scan_data = append(this.Scan_data, o)
// 	return &this.Scan_data[positionThatAppendWillUse]
// }

// // import (
// // 	"github.com/freetaxii/libstix2/objects/common"
// // )

// // ----------------------------------------------------------------------
// // Define Message Type
// // ----------------------------------------------------------------------

// type ScanDataType struct {
// 	Product        string `json:"product,omitempty"`
// 	Engine         string `json:"engine,omitempty"`
// 	Definition     string `json:"definition,omitempty"`
// 	Submitted      string `json:"submitted,omitempty"`
// 	Scanned        string `json:"scanned,omitempty"`
// 	Classification string `json:"classification,omitempty"`
// 	Details        string `json:"details,omitempty"`
// }

// // ----------------------------------------------------------------------
// // Public Methods - ScanDataType
// // ----------------------------------------------------------------------

// func (this *ScanDataType) SetProduct(s string) {
// 	this.Product = s
// }

// // This function will set the version number of the Engine
// func (this *ScanDataType) SetEngineVersion(s string) {
// 	this.Engine = s
// }

// // This function will set the version number of the definition file
// func (this *ScanDataType) SetDefinitionVersion(s string) {
// 	this.Definition = s
// }

// // SetSubmitted takes in two parameters and returns and error if there is one
// // param: t a timestamp in either time.Time or string format
// // func (this *ScanDataType) SetSubmitted(t interface{}) error {

// // 	ts, err := common.VerifySTIXTimestamp(t)
// // 	if err != nil {
// // 		return err
// // 	}
// // 	this.Submitted = ts

// // 	return nil
// // }

// // SetScanned takes in two parameters and returns and error if there is one
// // param: t a timestamp in either time.Time or string format
// // func (this *ScanDataType) SetScanned(t interface{}) error {

// // 	ts, err := common.VerifySTIXTimestamp(t)
// // 	if err != nil {
// // 		return err
// // 	}
// // 	this.Scanned = ts

// // 	return nil
// // }

// func (this *ScanDataType) SetClassification(s string) {
// 	this.Classification = s
// }

// func (this *ScanDataType) SetDetails(s string) {
// 	this.Details = s
// }
