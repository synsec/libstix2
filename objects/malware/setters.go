// Copyright 2015-2019 Bret Jordan, All rights reserved.
// Copyright 2019 Oleksii Morozov, All rights reserved.
//
// Use of this source code is governed by an Apache 2.0 license that can be
// found in the LICENSE file in the root of the source tree.

package malware

import (
	"github.com/freetaxii/libstix2/resources/helpers"
)

// ----------------------------------------------------------------------
// Public Methods
// ----------------------------------------------------------------------

/*
AddMalwareTypes - add malware types.

This property is an open vocabulary that specifies a set of categorizations for the malware being described.
This is an open vocabulary and values SHOULD come from the malware-type-ov vocabulary.
*/
func (o *Malware) AddMalwareTypes(data interface{}) error {
	arr, err := helpers.AddToList(o.MalwareTypes, data)

	if err != nil {
		return err
	}

	o.MalwareTypes = arr
	return nil
}

/*
AddMalwareType - add malware type.

This property is an open vocabulary that specifies a set of categorizations for the malware being described.
This is an open vocabulary and values SHOULD come from the malware-type-ov vocabulary.
*/
func (o *Malware) AddMalwareType(s string) error {
	o.MalwareTypes = append(o.MalwareTypes, s)

	return nil
}

/*
SetIsFamily - sets is family

Whether the object represents a malware family (if true) or a malware instance (if false).
*/
func (o *Malware) SetIsFamily(b bool) error {
	o.IsFamily = b

	return nil
}

/*
AddOsExecutionEnvs - adds Os Execution Envs

The operating systems that the malware family or malware instance is executable on.

Each string value for this property SHOULD be a CPE v2.3 entry from the official NVD CPE Dictionary [NVD] . This property MAY include custom values including values taken from other standards such as SWID [SWID].
*/
func (o *Malware) AddOsExecutionEnvs(data interface{}) error {
	arr, err := helpers.AddToList(o.OsExecutionEnvs, data)

	if err != nil {
		return err
	}

	o.OsExecutionEnvs = arr
	return nil
}

/*
AddOsExecutionEnv - adds Os Execution Env

The operating systems that the malware family or malware instance is executable on.

Each string value for this property SHOULD be a CPE v2.3 entry from the official NVD CPE Dictionary [NVD] . This property MAY include custom values including values taken from other standards such as SWID [SWID].
*/
func (o *Malware) AddOsExecutionEnv(s string) error {
	o.OsExecutionEnvs = append(o.OsExecutionEnvs, s)

	return nil
}

/*
AddArchitectureExecutionEnvs - adds architecture execution envs.

The processor architectures (e.g., x86, ARM, etc.) that the malware instance or family is executable on.

This is an open vocabulary and values SHOULD come from the processor-architecture-ov vocabulary.
*/
func (o *Malware) AddArchitectureExecutionEnvs(data interface{}) error {
	arr, err := helpers.AddToList(o.ArchitectureExecutionEnvs, data)

	if err != nil {
		return err
	}

	o.ArchitectureExecutionEnvs = arr
	return nil
}

/*
AddArchitectureExecutionEnv - adds architecture execution env.

The processor architectures (e.g., x86, ARM, etc.) that the malware instance or family is executable on.

This is an open vocabulary and values SHOULD come from the processor-architecture-ov vocabulary.
*/
func (o *Malware) AddArchitectureExecutionEnv(s string) error {
	o.ArchitectureExecutionEnvs = append(o.ArchitectureExecutionEnvs, s)

	return nil
}

/*
AddImplementationLanguages - adds implementation languages

The programming language(s) used to implement the malware instance or family.

This is an open vocabulary and values SHOULD come from the implementation-language-ov vocabulary.
*/
func (o *Malware) AddImplementationLanguages(data interface{}) error {
	arr, err := helpers.AddToList(o.ImplementationLanguages, data)

	if err != nil {
		return err
	}

	o.ImplementationLanguages = arr
	return nil
}

/*
AddImplementationLanguage - adds implementation language

The programming language(s) used to implement the malware instance or family.

This is an open vocabulary and values SHOULD come from the implementation-language-ov vocabulary.
*/
func (o *Malware) AddImplementationLanguage(s string) error {
	o.ImplementationLanguages = append(o.ImplementationLanguages, s)

	return nil
}

/*
AddCapabilities - adds capabilities.

Specifies any capabilities identified for the malware instance or family.

This is an open vocabulary and values SHOULD come from the malware-capabilities-ov vocabulary.
*/
func (o *Malware) AddCapabilities(data interface{}) error {
	arr, err := helpers.AddToList(o.Capabilities, data)

	if err != nil {
		return err
	}

	o.Capabilities = arr
	return nil
}

/*
AddCapability - adds capabilitie.

Specifies any capabilities identified for the malware instance or family.

This is an open vocabulary and values SHOULD come from the malware-capabilities-ov vocabulary.
*/
func (o *Malware) AddCapability(s string) error {
	o.Capabilities = append(o.Capabilities, s)

	return nil
}

/*
AddSampleRefs - adds sample refs.

The sample_refs property specifies a list of identifiers of the SCO file or artifact objects associated with this malware instance(s) or family.

If is_family is false, then all samples listed in sample_refs MUST refer to the same binary data.
*/
func (o *Malware) AddSampleRefs(data interface{}) error {
	arr, err := helpers.AddToList(o.SampleRefs, data)

	if err != nil {
		return err
	}

	o.SampleRefs = arr
	return nil
}

/*
AddSampleRef - adds sample ref.

The sample_refs property specifies a list of identifiers of the SCO file or artifact objects associated with this malware instance(s) or family.

If is_family is false, then all samples listed in sample_refs MUST refer to the same binary data.
*/
func (o *Malware) AddSampleRef(s string) error {
	o.SampleRefs = append(o.SampleRefs, s)

	return nil
}
