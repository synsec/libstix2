// Copyright 2015-2019 Bret Jordan, All rights reserved.
//
// Use of this source code is governed by an Apache 2.0 license that can be
// found in the LICENSE file in the root of the source tree.

package malware

import (
	"testing"
)

// ----------------------------------------------------------------------
// Tests
// These tests will not use the setters as some setters will have their
// own logic and verification steps in them.
// ----------------------------------------------------------------------

// ----------------------------------------------------------------------
// Test the public Valid method - Make sure we hit each level and make sure
// required property checks are working when they are left blank.
// ----------------------------------------------------------------------

/*
TestValid1 - Make sure we get a value of false when Malware obj is blank.
*/
func TestValid1(t *testing.T) {
	m := New()
	want := false

	if got, err := m.Valid(); got != want {
		t.Error("Fail Malware Object should be invalid when empty")
		t.Log(err)
	}
}

//TestValid2 -
func TestValid2(t *testing.T) {
	m := New()
	want := true

	m.AddMalwareTypes("bot")
	m.SetIsFamily(false)

	if got, err := m.Valid(); got != want {
		t.Error("Fail Malware Object should be valid when require fields not empty")
		t.Log(err)
	}
}

//TestValid3 - IsFamily is required but by default if false.
func TestValid3(t *testing.T) {
	m2 := New()
	want := true

	m2.AddMalwareTypes("bot")

	if got, err := m2.Valid(); got != want {
		t.Error("Fail Malware Object IsFamily is required")
		t.Log(err)
	}
}

//TestValid3 - MalwareTypes is required
func TestValid4(t *testing.T) {
	m := New()
	want := false

	m.SetIsFamily(true)

	if got, err := m.Valid(); got != want {
		t.Error("Fail Malware Object MalwareTypes is required")
		t.Log(err)
	}
}

//TestValid5 - MalwareTypes should add only of vocab value
func TestValid5(t *testing.T) {
	m := New()
	want := false
	wantMessage := "the MalwareTypes property should be one of list: adware, backdoor, bot, bootkit, ddos, downloader, dropper, exploit-kit, keylogger, ransomware, remote-access-trojan, resource-exploitation, rogue-security-software, rootkit, screen-capture, spyware, trojan, unknown, virus, webshell, wiper, worm"

	m.AddMalwareTypes("asdasdasd")
	m.SetIsFamily(true)

	if got, err := m.Valid(); got != want {
		t.Error("Fail Malware Object MalwareTypes added value not from vocab")
		t.Log(err)
	}

	if _, err := m.Valid(); err.Error() != wantMessage {
		t.Error("Fail Malware Object MalwareTypes added value not from vocab. Wrong error message")
		t.Log(err)
	}
}

//TestValid6 - ArchitectureExecutionEnvs should add only of vocab value
func TestValid6(t *testing.T) {
	m := New()
	want := false
	wantMessage := "the ArchitectureExecutionEnvs property should be one of list: alpha, arm, ia-64, mips, powerpc, sparc, x86, x86-64"

	m.AddMalwareTypes("bot")
	m.SetIsFamily(true)
	m.AddArchitectureExecutionEnvs("llkjlk")

	if got, err := m.Valid(); got != want {
		t.Error("Fail Malware Object ArchitectureExecutionEnvs added value not from vocab")
		t.Log(err)
	}

	if _, err := m.Valid(); err.Error() != wantMessage {
		t.Error("Fail Malware Object ArchitectureExecutionEnvs added value not from vocab. Wrong error message")
		t.Log(err)
	}
}

//TestValid6 - ImplementationLanguages should add only of vocab value
func TestValid7(t *testing.T) {
	m := New()
	want := false
	wantMessage := "the ImplementationLanguages property should be one of list: applescript, bash, c, c++, c#, go, java, javascript, lua, objective-c, perl, php, powershell, python, ruby, scala, swift, typescript, visual-basic, x86-32, x86-64"

	m.AddMalwareTypes("bot")
	m.SetIsFamily(true)
	m.AddImplementationLanguages("llkjlk")

	if got, err := m.Valid(); got != want {
		t.Error("Fail Malware Object ImplementationLanguages added value not from vocab")
		t.Log(err)
	}

	if _, err := m.Valid(); err.Error() != wantMessage {
		t.Error("Fail Malware Object ImplementationLanguages added value not from vocab. Wrong error message")
		t.Log(err)
	}
}

//TestValidCapabilitiesRequired - Capabilities should add only of vocab value
func TestValidCapabilitiesRequired(t *testing.T) {
	m := New()
	want := false
	wantMessage := "the Capabilities property should be one of list: accesses-remote-machines, anti-debugging, anti-disassembly, anti-emulation, anti-memory-forensics, anti-sandbox, anti-vm, captures-input-peripherals, captures-output-peripherals, captures-system-state-data, cleans-traces-of-infection, commits-fraud, communicates-with-c2, compromises-data-availability, compromises-data-integrity, compromises-system-availability, controls-local-machine, degrades-security-software, degrades-system-updates, determines-c2-server, emails-spam, escalates-privileges, evades-av, exfiltrates-data, fingerprints-host, hides-artifacts, hides-executing-code, infects-files, infects-remote-machines, installs-other-components, persists-after-system-reboot, prevents-artifact-access, prevents-artifact-deletion, probes-network-environment, self-modifies, steals-authentication-credentials, violates-system-operational-integrity"

	m.AddMalwareTypes("bot")
	m.SetIsFamily(true)
	m.AddCapabilities("llkjlk")

	if got, err := m.Valid(); got != want {
		t.Error("Fail Malware Object Capabilities added value not from vocab")
		t.Log(err)
	}

	if _, err := m.Valid(); err.Error() != wantMessage {
		t.Error("Fail Malware Object Capabilities added value not from vocab. Wrong error message")
		t.Log(err)
	}
}

//TestValid9 - should be valid
func TestValid9(t *testing.T) {
	m := New()
	want := true

	m.AddMalwareTypes("bot")
	m.SetIsFamily(true)
	m.AddCapabilities("accesses-remote-machines")
	m.AddImplementationLanguages("bash")
	m.AddArchitectureExecutionEnvs("arm")

	if got, err := m.Valid(); got != want {
		t.Error("Fail Malware Object shoulf be valid")
		t.Log(err)
	}
}
